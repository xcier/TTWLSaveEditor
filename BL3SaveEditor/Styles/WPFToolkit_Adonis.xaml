<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
                    xmlns:pg="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid;assembly=Xceed.Wpf.Toolkit"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit"
                    xmlns:editor="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Editors;assembly=Xceed.Wpf.Toolkit"
                    xmlns:prim="clr-namespace:Xceed.Wpf.Toolkit.Primitives;assembly=Xceed.Wpf.Toolkit"
                    xmlns:pgconv="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Converters;assembly=Xceed.Wpf.Toolkit"
                    xmlns:utilities="clr-namespace:Xceed.Wpf.Toolkit.Core.Utilities;assembly=Xceed.Wpf.Toolkit"
                    xmlns:commands="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Commands;assembly=Xceed.Wpf.Toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
                    xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes;assembly=Xceed.Wpf.Toolkit">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <conv:InverseBoolConverter x:Key="InverseBoolConverter" />
    <conv:HalfConverter x:Key="HalfConverter" />
    <conv:NullToBoolConverter x:Key="NullToBoolConverter" />
    <pgconv:ExpandableObjectMarginConverter x:Key="ExpandableObjectMarginConverter" />
    <pgconv:ObjectToUIElementConverter x:Key="ObjectToUIElementConverter" />
    <pgconv:IsStringEmptyConverter x:Key="IsStringEmptyConverter" />
    <pgconv:IsDefaultCategoryConverter x:Key="IsDefaultCategoryConverter" />
    <pgconv:SelectedObjectConverter x:Key="objectConverter" />
    <pgconv:PropertyItemEditorConverter x:Key="PropertyItemEditorConverter" />
    <pgconv:PropertyNameTextTrimmingConverter x:Key="PropertyNameTextTrimmingConverter" />
    <Geometry x:Key="DownArrowGeometry">M0,0 L3,0 4.5,1.5 6,0 9,0 4.5,4.5 z</Geometry>

    <Style x:Key="InputBoxStyle" TargetType="{x:Type prim:InputBase}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BorderBrush}}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}"/>
        <Setter Property="adonisExtensions:CornerRadiusExtension.CornerRadius" Value="{DynamicResource {x:Static adonisUi:Dimensions.CornerRadius}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="adonisExtensions:ScrollViewerExtension.VerticalScrollBarExpansionMode" Value="ExpandOnHover"/>
        <Setter Property="adonisExtensions:ScrollViewerExtension.HorizontalScrollBarExpansionMode" Value="ExpandOnHover"/>
        <Setter Property="adonisExtensions:ScrollViewerExtension.VerticalScrollBarPlacement" Value="Docked"/>
        <Setter Property="adonisExtensions:ScrollViewerExtension.HorizontalScrollBarPlacement" Value="Docked"/>
        <Setter Property="adonisExtensions:ScrollViewerExtension.HideScrollBarsUntilMouseOver" Value="False"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="adonisExtensions:ValidationExtension.IsErrorMessageVisibleOnFocus" Value="True"/>
        <Setter Property="adonisExtensions:ValidationExtension.IsErrorMessageVisibleOnMouseOver" Value="True"/>

        <Style.Triggers>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BorderBrush}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BorderBrush}}"/>
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBorderBrush}}"/>
                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBrush}}"/>
                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBorderBrush}}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2HighlightBrush}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2HighlightBorderBrush}}"/>
                    <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBrush}}"/>
                    <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBorderBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3HighlightBrush}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3HighlightBorderBrush}}"/>
                    <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBrush}}"/>
                    <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBorderBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4HighlightBrush}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4HighlightBorderBrush}}"/>
                    <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBrush}}"/>
                    <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBorderBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer0BackgroundBrush}}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2"/>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3"/>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4"/>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.ErrorBrush}}"/>
                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.ErrorBrush}}"/>
            </Trigger>

        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type xctk:DecimalUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:DoubleUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:IntegerUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:ShortUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:LongUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:ByteUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:SingleUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:SByteUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:UIntegerUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:ULongUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:UShortUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type xctk:TimeSpanUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    
    <Style x:Key="ColorPickerStyle" TargetType="{x:Type xctk:ColorPicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
        <Setter Property="DropDownBackground" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
        <Setter Property="HeaderBackground" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
        <Setter Property="TabBackground" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
        <Setter Property="HeaderForeground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
        <Setter Property="TabForeground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
    </Style>
    <Style TargetType="{x:Type xctk:ColorPicker}" BasedOn="{StaticResource ColorPickerStyle}" />
    <Style TargetType="{x:Type xctk:WatermarkTextBox}" x:Key="WatermarkTextBoxStyle">
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
    </Style>

    <!-- Property Grid Styles -->

    <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Padding="{TemplateBinding Padding}"
                      SnapsToDevicePixels="True">
                                <ContentPresenter Content="{TemplateBinding Content}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                            </Border>

                            <chrome:ButtonChrome x:Name="ToggleButtonChrome"
                                   Grid.Column="1"
                                   CornerRadius="0,2.75,2.75,0"
                                   RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:MultiLineTextEditor}}"
                                   RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:MultiLineTextEditor}}"
                                   RenderMouseOver="{TemplateBinding IsMouseOver}"
                                   RenderPressed="{TemplateBinding IsPressed}">
                                <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Grid.Column="1" Margin="5">
                                    <Path x:Name="Arrow" Width="9" Height="5" Data="{StaticResource DownArrowGeometry}" Fill="#FF000000" Margin="0,1,0,0" />
                                </Grid>
                            </chrome:ButtonChrome>
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xctk:MultiLineTextEditor}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9"
                        Offset="0" />
                    <GradientStop Color="#FF8399A9"
                        Offset="0.375" />
                    <GradientStop Color="#FF718597"
                        Offset="0.375" />
                    <GradientStop Color="#FF617584"
                        Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="Content" Value="{StaticResource DefaultContent}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:MultiLineTextEditor}">
                    <Grid x:Name="Root">
                        <ToggleButton x:Name="PART_DropDownButton" Grid.Column="1"
                                      Foreground="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"
                          IsTabStop="True"
                          MinHeight="22"
                          SnapsToDevicePixels="True"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Padding="{TemplateBinding Padding}"
                          Content="{TemplateBinding Content}"
                          ContentTemplate="{TemplateBinding ContentTemplate}"
                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                          IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ToggleButtonStyle}"
                          IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
                        </ToggleButton>
                        <Popup IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}" StaysOpen="False" Placement="Bottom"
                   SnapsToDevicePixels="True"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Slide"
                   Width="{TemplateBinding DropDownWidth}"
                   Height="{TemplateBinding DropDownHeight}"
                   ToolTip="{x:Static sys:String.Empty}">
                            <Popup.Resources>
                                <Style TargetType="ToolTip">
                                    <Style.Triggers>
                                        <Trigger Property="Content"
                             Value="{x:Static sys:String.Empty}">
                                            <Setter Property="Visibility"
                              Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Border BorderThickness="1"
                      Background="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"
                      BorderBrush="{DynamicResource {x:Static adonisUi:Brushes.Layer4BorderBrush}}">
                                <Grid>
                                    <TextBox x:Name="PART_TextBox" AcceptsReturn="true"
                           TextWrapping="{TemplateBinding TextWrapping}" Padding="{TemplateBinding Padding}" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" SpellCheck.IsEnabled="{TemplateBinding IsSpellCheckEnabled}" IsReadOnly="{TemplateBinding IsReadOnly}" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TextAlignment="{TemplateBinding TextAlignment}" Margin="3" Foreground="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}">
                                    </TextBox>
                                    <Thumb x:Name="PART_ResizeThumb" HorizontalAlignment="Right" VerticalAlignment="Bottom" Cursor="SizeNWSE">
                                        <Thumb.Template>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Grid Background="Transparent">
                                                    <Path Data="M0.5,6.5 L6.5,0.5 M6.5,3.5 L3.5,6.5" Stroke="Black" StrokeThickness="1" />
                                                </Grid>
                                            </ControlTemplate>
                                        </Thumb.Template>
                                    </Thumb>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PrimitiveTypeCollectionControl" TargetType="{x:Type xctk:PrimitiveTypeCollectionControl}">
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1"
                             StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9"
                        Offset="0" />
                    <GradientStop Color="#FF8399A9"
                        Offset="0.375" />
                    <GradientStop Color="#FF718597"
                        Offset="0.375" />
                    <GradientStop Color="#FF617584"
                        Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:PrimitiveTypeCollectionControl}">
                    <xctk:MultiLineTextEditor Background="{TemplateBinding Background}" Foreground="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     Content="{TemplateBinding Content}"
                                     ContentTemplate="{TemplateBinding ContentTemplate}"
                                     Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     IsOpen="{TemplateBinding IsOpen}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     DropDownWidth="{TemplateBinding ActualWidth}">
                    </xctk:MultiLineTextEditor>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionForegroundBrush}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorPrimitiveTypeCollectionControl}" BasedOn="{StaticResource PrimitiveTypeCollectionControl}">
        <Setter Property="Content" Value="(Collection)" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
    </Style>


    <Style TargetType="{x:Type editor:PropertyGridEditorDecimalUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorDoubleUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorIntegerUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorShortUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorLongUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorByteUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorSingleUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorSByteUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorUIntegerUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorULongUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorUShortUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorTimeSpanUpDown}" BasedOn="{StaticResource InputBoxStyle}" />
    <Style TargetType="{x:Type editor:PropertyGridEditorTextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
    </Style>

    <SolidColorBrush x:Key="GlyphBrush" Color="#FF31347C" />
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Rectangle Margin="0,0,0,0"
                 x:Name="Rectangle"
                 Fill="Transparent" />
            <Path HorizontalAlignment="Center"
            x:Name="Up_Arrow"
            VerticalAlignment="Center"
            Fill="{StaticResource GlyphBrush}"
            Data="M 0 0 L 4 4 L 8 0 Z"
            RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1"
                            ScaleY="1" />
                        <SkewTransform AngleX="0"
                           AngleY="0" />
                        <RotateTransform Angle="-90" />
                        <TranslateTransform X="0"
                                Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center"
            Fill="{StaticResource GlyphBrush}"
            Data="M 0 4 L 4 0 L 8 4 Z"
            RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1"
                            ScaleY="1" />
                        <SkewTransform AngleX="0"
                           AngleY="0" />
                        <RotateTransform Angle="135" />
                        <TranslateTransform X="0"
                                Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>

            <ContentPresenter Grid.Column="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow" />
                <Setter Property="OpacityMask" TargetName="Down_Arrow" Value="#FF000000" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="SingleDefaultCategoryItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!-- No Expander for the Misc Category if Misc category is the only category-->
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="#FFF0F0F0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*"
                             x:Name="ContentRow" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="#FFF0F0F0">
                            <ToggleButton Template="{StaticResource ExpanderToggleButton}"
                            IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            OverridesDefaultStyle="True">
                                <ContentPresenter Margin="1"
                                  RecognizesAccessKey="True"
                                  ContentSource="Header"
                                  TextElement.FontWeight="Bold" />
                            </ToggleButton>
                        </Border>
                        <Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" Background="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}" Padding="10 0 0 0">
                            <Border BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Expander x:Name="expander" Header="{Binding Name}" Style="{StaticResource ExpanderStyle}" IsExpanded="True" HeaderTemplate="{Binding CategoryGroupHeaderTemplate, RelativeSource={RelativeSource AncestorType={x:Type pg:PropertyGrid}}}">
                            <ItemsPresenter />
                        </Expander>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Name, Converter={StaticResource IsDefaultCategoryConverter}}"
                     Value="True" />
                    <Condition Binding="{Binding IsMiscCategoryLabelHidden, RelativeSource={RelativeSource AncestorType={x:Type pg:PropertyGrid}}}"
                     Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupItem}">
                            <!-- No Expander for the Misc Category if IsMiscCategoryLabelHidden == true-->
                            <ItemsPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <pg:CategoryGroupStyleSelector x:Key="categoryGroupStyleSelector" SingleDefaultCategoryItemGroupStyle="{StaticResource SingleDefaultCategoryItemGroupContainerStyle}" ItemGroupStyle="{StaticResource PropertyItemGroupContainerStyle}" />

    <Style x:Key="PropertyExpanderStyle"
         TargetType="{x:Type Expander}">
        <Setter Property="Padding"
            Value="10 0 0 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Border Visibility="Collapsed"
                    Grid.Row="1"
                    x:Name="ExpandSite"
                    Padding="0 0 0 0">
                            <Border BorderThickness="0"
                      Margin="0"
                      Padding="0"
                      VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Focusable="false" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                     Value="True">
                            <Setter Property="Visibility"
                      Value="Visible"
                      TargetName="ExpandSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionForegroundBrush}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="PropertyGridStyle" TargetType="{x:Type pg:PropertyGrid}">
        <Setter Property="AdvancedOptionsMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ContextMenu}}}" CommandParameter="{Binding}" Header="Reset Value">
                        <MenuItem.Command>
                            <RoutedCommand/>
                        </MenuItem.Command>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SelectedObjectType">
            <Setter.Value>
                <Binding ConverterParameter="Type" Path="SelectedObject" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                        <pgconv:SelectedObjectConverter/>
                    </Binding.Converter>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedObjectTypeName">
            <Setter.Value>
                <Binding ConverterParameter="TypeName" Path="SelectedObject" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                        <pgconv:SelectedObjectConverter/>
                    </Binding.Converter>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedObjectName">
            <Setter.Value>
                <Binding ConverterParameter="SelectedObjectName" Path="SelectedObject" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                        <pgconv:SelectedObjectConverter/>
                    </Binding.Converter>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="CategoryGroupHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pg:PropertyGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                                <RowDefinition Height="5"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <StackPanel x:Name="selectObjectNamePanel" Orientation="Horizontal">
                                <Border BorderBrush="Black" BorderThickness="1" Background="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}" Height="44" Margin="6,4,0,4" Padding="2" Width="44">
                                    <Border.Visibility>
                                        <Binding Path="ShowPreview" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <BooleanToVisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Border.Visibility>
                                    <Rectangle>
                                        <Rectangle.Fill>
                                            <VisualBrush Stretch="Uniform">
                                                <VisualBrush.Visual>
                                                    <Binding Path="SelectedObject" RelativeSource="{RelativeSource TemplatedParent}">
                                                        <Binding.Converter>
                                                            <pgconv:ObjectToUIElementConverter/>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </VisualBrush.Visual>
                                            </VisualBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Border>
                                <StackPanel Margin="6,2,6,4" Orientation="Horizontal" VerticalAlignment="Center">
                                    <StackPanel.Visibility>
                                        <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <BooleanToVisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </StackPanel.Visibility>
                                    <Grid>
                                        <Grid.MaxWidth>
                                            <Binding ConverterParameter="17" Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <conv:HalfConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Grid.MaxWidth>
                                        <pg:TrimmedTextBlock FontWeight="Bold" Text="{TemplateBinding SelectedObjectTypeName}" TextTrimming="CharacterEllipsis"/>
                                    </Grid>
                                    <Grid Margin="5,0,0,0">
                                        <Grid.MaxWidth>
                                            <Binding ConverterParameter="17" Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <conv:HalfConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Grid.MaxWidth>
                                        <pg:TrimmedTextBlock Text="{TemplateBinding SelectedObjectName}" TextTrimming="CharacterEllipsis"/>
                                    </Grid>
                                </StackPanel>
                            </StackPanel>
                            <Grid x:Name="toolsContainer" Margin="4,0,4,4" Grid.Row="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="sortButtonContainer" Margin="4">
                                    <Grid.Visibility>
                                        <Binding Path="ShowSortOptions" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <BooleanToVisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Grid.Visibility>
                                    <StackPanel Margin="1" Orientation="Horizontal">
                                        <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="Categorized" VerticalAlignment="Center">
                                            <RadioButton.Style>
                                                <Style TargetType="{x:Type RadioButton}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                    <Setter Property="Height" Value="22"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                    <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                                                    <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                                                    <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RadioButton}">
                                                                <Grid SnapsToDevicePixels="True">
                                                                    <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0"/>
                                                                    <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0">
                                                                        <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                                                            <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                                                                <ContentPresenter x:Name="Content" RenderOptions.BitmapScalingMode="NearestNeighbor" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="Center"/>
                                                                            </StackPanel>
                                                                        </Border>
                                                                    </Border>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Opacity" TargetName="Content" Value="0.5"/>
                                                                        <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RadioButton.Style>
                                            <Image Height="16" Width="16">
                                                <Image.Source>
                                                    <BitmapImage UriSource="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/Categorize16.png"/>
                                                </Image.Source>
                                            </Image>
                                        </RadioButton>
                                        <RadioButton ToolTip="Alphabetical" VerticalAlignment="Center">
                                            <RadioButton.IsChecked>
                                                <Binding Mode="OneWay" Path="IsCategorized" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <conv:InverseBoolConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </RadioButton.IsChecked>
                                            <RadioButton.Style>
                                                <Style TargetType="{x:Type RadioButton}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                    <Setter Property="Height" Value="22"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                    <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                                                    <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                                                    <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RadioButton}">
                                                                <Grid SnapsToDevicePixels="True">
                                                                    <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0"/>
                                                                    <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0">
                                                                        <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                                                            <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                                                                <ContentPresenter x:Name="Content" RenderOptions.BitmapScalingMode="NearestNeighbor" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="Center"/>
                                                                            </StackPanel>
                                                                        </Border>
                                                                    </Border>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBorderBrush}}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Opacity" TargetName="Content" Value="0.5"/>
                                                                        <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BorderBrush}}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BorderBrush}}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RadioButton.Style>
                                            <Image Height="16" Width="16">
                                                <Image.Source>
                                                    <BitmapImage UriSource="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/SortAscending16.png"/>
                                                </Image.Source>
                                            </Image>
                                        </RadioButton>
                                    </StackPanel>
                                </Grid>
                                <Border x:Name="searchBoxContainer" BorderBrush="Gray" BorderThickness="1" Background="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}" Grid.Column="1" Margin="4,4,0,4">
                                    <Border.Visibility>
                                        <Binding Path="ShowSearchBox" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <BooleanToVisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Border.Visibility>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <xctk:WatermarkTextBox x:Name="_txtFilter" BorderThickness="1" Background="Transparent" Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Watermark="{TemplateBinding FilterWatermark}" Foreground="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}">
                                            <xctk:WatermarkTextBox.Style>
                                                <Style TargetType="{x:Type Control}">
                                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </xctk:WatermarkTextBox.Style>
                                        </xctk:WatermarkTextBox>
                                        <Button Grid.Column="1" HorizontalAlignment="Left">
                                            <Button.Command>
                                                <RoutedCommand/>
                                            </Button.Command>
                                            <Button.Style>
                                                <Style TargetType="{x:Type Button}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                    <Setter Property="Height" Value="22"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                    <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                                                    <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                                                    <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Button}">
                                                                <Grid SnapsToDevicePixels="True">
                                                                    <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0"/>
                                                                    <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0">
                                                                        <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                                                            <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                                                                <ContentPresenter x:Name="Content" RenderOptions.BitmapScalingMode="NearestNeighbor" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="Center"/>
                                                                            </StackPanel>
                                                                        </Border>
                                                                    </Border>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBorderBrush}}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Opacity" TargetName="Content" Value="0.5"/>
                                                                        <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBorderBrush}}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Button.Style>
                                            <Image Height="16" Width="16">
                                                <Image.Source>
                                                    <BitmapImage UriSource="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/ClearFilter16.png"/>
                                                </Image.Source>
                                            </Image>
                                        </Button>
                                    </Grid>
                                </Border>
                            </Grid>
                            <Grid Background="Transparent" Grid.Row="2">

                                <pg:PropertyItemsControl Background="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}" x:Name="PART_PropertyItemsControl" IsTabStop="False" Focusable="False" ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}" ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource TemplatedParent}}" VirtualizingStackPanel.VirtualizationMode="Recycling" ScrollViewer.CanContentScroll="{Binding IsVirtualizing, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top">

                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.GroupStyle>
                                        <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}" />
                                    </ItemsControl.GroupStyle>

                                    <ItemsControl.Template>
                                        <ControlTemplate>
                                            <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                <ScrollViewer x:Name="ScrollBar" Padding="{TemplateBinding Padding}" Focusable="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" adonisExtensions:ScrollViewerExtension.VerticalScrollBarExpansionMode="AlwaysExpand">
                                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </ScrollViewer>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <DataTrigger Binding="{Binding ShowHorizontalScrollBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}" Value="True">
                                                    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" TargetName="ScrollBar" />
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ItemsControl.Template>
                                </pg:PropertyItemsControl>

                                <Thumb x:Name="PART_DragThumb" Cursor="SizeWE" HorizontalAlignment="Left" Margin="6,0,0,0" Width="5">
                                    <Thumb.Template>
                                        <ControlTemplate>
                                            <Border Background="Transparent"/>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Grid>
                            <GridSplitter HorizontalAlignment="Stretch" Height="3" Grid.Row="3">
                                <GridSplitter.Visibility>
                                    <Binding Path="ShowSummary" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </GridSplitter.Visibility>
                            </GridSplitter>
                            <StackPanel Margin="0,0,0,5" Grid.Row="4">
                                <StackPanel.Visibility>
                                    <Binding Path="ShowSummary" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </StackPanel.Visibility>
                                <TextBlock FontWeight="Bold" Padding="2,2,2,0" Text="{Binding SelectedPropertyItem.DisplayName, RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent" Foreground="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
                                <TextBlock Padding="5,2,2,0" TextWrapping="WrapWithOverflow" Text="{Binding SelectedPropertyItem.Description, RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent" Foreground="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Visibility" SourceName="searchBoxContainer" Value="Collapsed"/>
                                <Condition Property="Visibility" SourceName="sortButtonContainer" Value="Collapsed"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="toolsContainer" Value="Collapsed"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style TargetType="{x:Type xctk:WatermarkTextBox}" BasedOn="{StaticResource WatermarkTextBoxStyle}"/>
            <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}"/>

            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionForegroundBrush}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type editor:PropertyGridEditorCollectionControl}">
                <Style.Resources>
                    <!-- The above style overwrites the chrome button, gotta fix that here -->
                    <Style TargetType="{x:Type chrome:ButtonChrome}" BasedOn="{StaticResource {x:Type chrome:ButtonChrome}}"/>
                </Style.Resources>
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionForegroundBrush}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type pg:PropertyItem}">
                <Setter Property="Background" Value="Transparent" />
                <!-- Set the margin at 1 pixel bottom to let the horizontal "line" effect appear. -->
                <Setter Property="Margin" Value="0,0,0,1" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type pg:PropertyItemBase}">
                            <Border Background="{TemplateBinding Background}" ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}" ContextMenuService.Placement="Bottom">
                                <Grid Background="{TemplateBinding Background}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{Binding NameColumnWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type pg:PropertyGrid}}}" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <!-- Set the BorderThickness at 1 pixel to the right to let the "vertical line" appear -->
                                    <Border x:Name="PART_Name" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0,0,1,0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                        <Grid Margin="2,2,2,2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <Grid Margin="{Binding Level, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ExpandableObjectMarginConverter}}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition x:Name="_expandableButtonColumn"
                                        Width="{Binding PropertyNameLeftPadding, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type pg:PropertyGrid}}}" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>

                                                <ToggleButton x:Name="_expandableButton" Grid.Column="0" Template="{StaticResource ExpanderToggleButton}" OverridesDefaultStyle="True" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding IsExpandable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                </ToggleButton>

                                                <pg:TrimmedTextBlock x:Name="_text"
                                         Grid.Column="1"
                                         Text="{Binding DisplayName, RelativeSource={RelativeSource TemplatedParent}}"
                                         HighlightedText="{Binding HighlightedText, RelativeSource={RelativeSource TemplatedParent}}"
                                         HorizontalAlignment="Stretch"
                                         VerticalAlignment="Center"
                                         TextTrimming="{Binding PropertyNameTextWrapping, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource PropertyNameTextTrimmingConverter}}"
                                         TextWrapping="{Binding PropertyNameTextWrapping, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                                         IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}" >
                                                </pg:TrimmedTextBlock>
                                            </Grid>

                                            <Grid Grid.Column="1"
                        HorizontalAlignment="Right"
                        Margin="5,0,5,0"
                        Visibility="{Binding ShowAdvancedOptions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource BooleanToVisibilityConverter}}"
                        utilities:ContextMenuUtilities.OpenOnMouseLeftButtonClick="True"
                        ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">

                                                <!-- ImageSource is set in Triggers for others Themes to set their proper icons -->
                                                <Image x:Name="_optionsImage"
                           Width="11"
                           Height="11"
                           ToolTip="{Binding AdvancedOptionsTooltip, RelativeSource={RelativeSource TemplatedParent}}" >
                                                </Image>
                                            </Grid>
                                        </Grid>
                                    </Border>

                                    <Border x:Name="PART_Editor"
                      Grid.Column="1"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      KeyboardNavigation.DirectionalNavigation="None"
                      VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch">
                                        <Border.ToolTip>
                                            <ToolTip Visibility="Collapsed" />
                                        </Border.ToolTip>
                                        <ContentControl x:Name="PART_ValueContainer"
                                Focusable="False"
                                IsTabStop="False"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <ContentControl.Content>
                                                <MultiBinding Converter="{StaticResource PropertyItemEditorConverter}">
                                                    <Binding Path="Editor" 
                               RelativeSource="{RelativeSource TemplatedParent}" />
                                                    <Binding Path="IsReadOnly"
                               RelativeSource="{RelativeSource AncestorType={x:Type pg:PropertyGrid}}" />
                                                    <Binding Path="IsReadOnly"
                               RelativeSource="{RelativeSource TemplatedParent}" />
                                                </MultiBinding>
                                            </ContentControl.Content>
                                        </ContentControl>
                                    </Border>

                                    <Expander x:Name="_propertyExpander"
                        Grid.ColumnSpan="2"
                        Grid.Row="1"
                        IsExpanded="{TemplateBinding IsExpanded}"
                        Style="{StaticResource PropertyExpanderStyle}"
                        IsEnabled="True">
                                        <pg:PropertyItemsControl x:Name="PART_PropertyItemsControl"
                                         IsTabStop="False"
                                         Focusable="False"
                                         ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                         ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                         VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                                         VirtualizingStackPanel.VirtualizationMode="Recycling"
                                         ScrollViewer.CanContentScroll="{Binding IsVirtualizing, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <VirtualizingStackPanel />
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>

                                            <ItemsControl.GroupStyle>
                                                <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}" />
                                            </ItemsControl.GroupStyle>

                                            <ItemsControl.Template>
                                                <ControlTemplate>
                                                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                              Padding="{TemplateBinding Padding}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              Background="{TemplateBinding Background}"
                              SnapsToDevicePixels="True">
                                                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                    </Border>
                                                </ControlTemplate>
                                            </ItemsControl.Template>
                                        </pg:PropertyItemsControl>
                                    </Expander>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="PART_Name" Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}" />
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="PART_Name" Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentInteractionBrush}}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" TargetName="PART_ValueContainer" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}" />
                                    <Setter Property="Foreground"
                      TargetName="_text"
                      Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}" />
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ShowDescriptionByTooltip, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                           Value="True" />
                                        <Condition Binding="{Binding Description, RelativeSource={RelativeSource Self}, Converter={StaticResource IsStringEmptyConverter}}"
                           Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="ToolTipService.ToolTip"
                      Value="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}"
                      TargetName="PART_Name" />
                                </MultiDataTrigger>
                                <Trigger Property="Visibility"
                     Value="Visible"
                     SourceName="_expandableButton">
                                    <Setter Property="Focusable"
                      Value="False" />
                                    <Setter Property="MinWidth"
                      Value="15"
                      TargetName="_expandableButtonColumn"/>
                                </Trigger>

                                <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Local}">
                                    <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/Local11.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Resource}">
                                    <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/Resource11.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Databinding}">
                                    <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/Database11.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Inheritance}">
                                    <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/Inheritance11.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.StyleSetter}">
                                    <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/Style11.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                         Value="{x:Static pg:StringConstants.Default}">
                                    <Setter TargetName="_optionsImage"
                      Property="Source"
                      Value="pack://application:,,,/Xceed.Wpf.Toolkit;v4.1.0.0;component/PropertyGrid/Images/AdvancedProperties11.png" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
        </Style.Resources>

    </Style>

    <!-- CollectionControl Styles -->
    <Style TargetType="{x:Type xctk:CollectionControlDialogBase}">
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
    </Style>
    <Style TargetType="{x:Type xctk:CollectionControlDialog}">
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
    </Style>
    <Style TargetType="{x:Type xctk:CollectionControl}">
        <Style.Resources>
            <Style TargetType="{x:Type Grid}">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
            </Style>
            <Style TargetType="{x:Type StackPanel}">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
            </Style>
            <Style TargetType="{x:Type ListBox}">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
            </Style>
            <Style TargetType="{x:Type ContentControl}">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
            </Style>

            <Style TargetType="{x:Type pg:PropertyGrid}" BasedOn="{StaticResource PropertyGridStyle}"/>
        </Style.Resources>


        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
    </Style>

</ResourceDictionary>